{"ast":null,"code":"import { useReducer, useRef, useEffect, useMemo, useLayoutEffect } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\n\nexport function useSelector(selector, equalityFn) {\n  if (equalityFn === void 0) {\n    equalityFn = refEquality;\n  }\n\n  invariant(selector, \"You must pass a selector to useSelectors\");\n\n  var _useReduxContext = useReduxContext(),\n      store = _useReduxContext.store,\n      contextSub = _useReduxContext.subscription;\n\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}","map":{"version":3,"sources":["/Users/wwh/Desktop/vscode/SCGO/client/node_modules/react-redux/es/hooks/useSelector.js"],"names":["useReducer","useRef","useEffect","useMemo","useLayoutEffect","invariant","useReduxContext","Subscription","useIsomorphicLayoutEffect","window","refEquality","a","b","useSelector","selector","equalityFn","_useReduxContext","store","contextSub","subscription","_useReducer","s","forceRender","latestSubscriptionCallbackError","latestSelector","latestSelectedState","selectedState","current","getState","err","errorMessage","message","stack","Error","undefined","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe"],"mappings":"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","sourcesContent":["import { useReducer, useRef, useEffect, useMemo, useLayoutEffect } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\n\nexport function useSelector(selector, equalityFn) {\n  if (equalityFn === void 0) {\n    equalityFn = refEquality;\n  }\n\n  invariant(selector, \"You must pass a selector to useSelectors\");\n\n  var _useReduxContext = useReduxContext(),\n      store = _useReduxContext.store,\n      contextSub = _useReduxContext.subscription;\n\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}"]},"metadata":{},"sourceType":"module"}