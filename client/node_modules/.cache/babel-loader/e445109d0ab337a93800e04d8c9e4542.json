{"ast":null,"code":"var _jsxFileName = \"/Users/wwh/Desktop/vscode/SCGO/client/src/components/views/RegisterPage/RegisterPage.js\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { registerUser } from \"../../../_actions/user_actions\";\nimport { useDispatch } from \"react-redux\";\nimport Codebox from \"../../utils/CodeBox/CodeBox\"; //\"@axetroy/react-codebox\";\n\nimport Axios from \"axios\";\nimport { Form, Input, Button } from \"antd\";\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  const [VerifyCode, setVerifyCode] = useState(\"\");\n  const [VerifyId, setVerifyId] = useState(\"\");\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      lastName: \"\",\n      name: \"\",\n      verification: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string().required(\"Name is required\"),\n      lastName: Yup.string().required(\"Last Name is required\"),\n      email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n      password: Yup.string().min(6, \"Password must be at least 6 characters\").required(\"Password is required\"),\n      confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\").required(\"Confirm Password is required\")\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        let dataToSubmit = {\n          email: values.email,\n          password: values.password,\n          name: values.name,\n          lastname: values.lastname,\n          verifyId: VerifyId,\n          verifyCode: VerifyCode,\n          image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\n        };\n        dispatch(registerUser(dataToSubmit)).then(response => {\n          if (response.payload.success) {\n            props.history.push(\"/login\");\n          } else {\n            alert(response.payload.err);\n          }\n        });\n        setSubmitting(false);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      dirty,\n      isSubmitting,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      handleReset\n    } = props;\n\n    const codeGet = () => {\n      let variable = {\n        email: values.email\n      };\n      Axios.post(\"/api/users/sendEmail\", variable).then(response => {\n        if (response.data.success) {\n          //console.log(response.data);\n          setVerifyId(response.data.id); // button state\n        } else {\n          //console.log(response.data.err);\n          alert(\"Failed to send email\");\n        }\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"Sign up\"), /*#__PURE__*/React.createElement(Form, Object.assign({\n      style: {\n        minWidth: \"375px\"\n      }\n    }, formItemLayout, {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"name\",\n      placeholder: \"Enter your name\",\n      type: \"text\",\n      value: values.name,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.name && touched.name ? \"text-input error\" : \"text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }), errors.name && touched.name && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, errors.name)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"Last Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"lastName\",\n      placeholder: \"Enter your Last Name\",\n      type: \"text\",\n      value: values.lastName,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.lastName && touched.lastName ? \"text-input error\" : \"text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }), errors.lastName && touched.lastName && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }, errors.lastName)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"Email\",\n      hasFeedback: true,\n      validateStatus: errors.email && touched.email ? \"error\" : \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"email\",\n      placeholder: \"Enter your Email\",\n      type: \"email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.email && touched.email ? \"text-input error\" : \"text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 19\n      }\n    }, errors.email)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"Verification\",\n      style: {\n        marginBottom: \"0 px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Codebox, {\n      id: \"verification\",\n      type: \"text\",\n      length: 4,\n      validator: (input, index) => {\n        return /\\d/.test(input);\n      },\n      onChange: codeArray => {\n        setVerifyCode(codeArray.join(\"\"));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: codeGet,\n      type: \"primary\",\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 19\n      }\n    }, \"Get Verification Code From Email\"))), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"Password\",\n      hasFeedback: true,\n      validateStatus: errors.password && touched.password ? \"error\" : \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"password\",\n      placeholder: \"Enter your password\",\n      type: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.password && touched.password ? \"text-input error\" : \"text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 19\n      }\n    }, errors.password)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      label: \"Confirm\",\n      hasFeedback: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"confirmPassword\",\n      placeholder: \"Enter your confirmPassword\",\n      type: \"password\",\n      value: values.confirmPassword,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.confirmPassword && touched.confirmPassword ? \"text-input error\" : \"text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }), errors.confirmPassword && touched.confirmPassword && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 19\n      }\n    }, errors.confirmPassword)), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: handleSubmit,\n      type: \"primary\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }, \"Submit\"))));\n  });\n}\n\nexport default RegisterPage;","map":{"version":3,"sources":["/Users/wwh/Desktop/vscode/SCGO/client/src/components/views/RegisterPage/RegisterPage.js"],"names":["React","useState","moment","Formik","Yup","registerUser","useDispatch","Codebox","Axios","Form","Input","Button","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegisterPage","props","dispatch","VerifyCode","setVerifyCode","VerifyId","setVerifyId","email","lastName","name","verification","password","confirmPassword","object","shape","string","required","min","oneOf","ref","values","setSubmitting","setTimeout","dataToSubmit","lastname","verifyId","verifyCode","image","unix","then","response","payload","success","history","push","alert","err","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","codeGet","variable","post","data","id","minWidth","marginBottom","input","index","test","codeArray","join"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { registerUser } from \"../../../_actions/user_actions\";\nimport { useDispatch } from \"react-redux\";\nimport Codebox from \"../../utils/CodeBox/CodeBox\"; //\"@axetroy/react-codebox\";\nimport Axios from \"axios\";\n\nimport { Form, Input, Button } from \"antd\";\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  const [VerifyCode, setVerifyCode] = useState(\"\");\n  const [VerifyId, setVerifyId] = useState(\"\");\n  return (\n    <Formik\n      initialValues={{\n        email: \"\",\n        lastName: \"\",\n        name: \"\",\n        verification: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string().required(\"Name is required\"),\n        lastName: Yup.string().required(\"Last Name is required\"),\n        email: Yup.string()\n          .email(\"Email is invalid\")\n          .required(\"Email is required\"),\n        password: Yup.string()\n          .min(6, \"Password must be at least 6 characters\")\n          .required(\"Password is required\"),\n        confirmPassword: Yup.string()\n          .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n          .required(\"Confirm Password is required\"),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            lastname: values.lastname,\n            verifyId: VerifyId,\n            verifyCode: VerifyCode,\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`,\n          };\n\n          dispatch(registerUser(dataToSubmit)).then((response) => {\n            if (response.payload.success) {\n              props.history.push(\"/login\");\n            } else {\n              alert(response.payload.err);\n            }\n          });\n\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {(props) => {\n        const {\n          values,\n          touched,\n          errors,\n          dirty,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n        } = props;\n\n        const codeGet = () => {\n          let variable = { email: values.email };\n          Axios.post(\"/api/users/sendEmail\", variable).then((response) => {\n            if (response.data.success) {\n              //console.log(response.data);\n              setVerifyId(response.data.id);\n              // button state\n            } else {\n              //console.log(response.data.err);\n              alert(\"Failed to send email\");\n            }\n          });\n        };\n\n        return (\n          <div className=\"app\">\n            <h2>Sign up</h2>\n            <Form\n              style={{ minWidth: \"375px\" }}\n              {...formItemLayout}\n              onSubmit={handleSubmit}\n            >\n              <Form.Item required label=\"Name\">\n                <Input\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                  type=\"text\"\n                  value={values.name}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.name && touched.name\n                      ? \"text-input error\"\n                      : \"text-input\"\n                  }\n                />\n                {errors.name && touched.name && (\n                  <div className=\"input-feedback\">{errors.name}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Last Name\">\n                <Input\n                  id=\"lastName\"\n                  placeholder=\"Enter your Last Name\"\n                  type=\"text\"\n                  value={values.lastName}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.lastName && touched.lastName\n                      ? \"text-input error\"\n                      : \"text-input\"\n                  }\n                />\n                {errors.lastName && touched.lastName && (\n                  <div className=\"input-feedback\">{errors.lastName}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item\n                required\n                label=\"Email\"\n                hasFeedback\n                validateStatus={\n                  errors.email && touched.email ? \"error\" : \"success\"\n                }\n              >\n                <Input\n                  id=\"email\"\n                  placeholder=\"Enter your Email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email\n                      ? \"text-input error\"\n                      : \"text-input\"\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item\n                required\n                label=\"Verification\"\n                style={{ marginBottom: \"0 px\" }}\n              >\n                <Form.Item>\n                  <Codebox\n                    id=\"verification\"\n                    type=\"text\"\n                    length={4}\n                    validator={(input, index) => {\n                      return /\\d/.test(input);\n                    }}\n                    onChange={(codeArray) => {\n                      setVerifyCode(codeArray.join(\"\"));\n                    }}\n                  />\n                  <Button onClick={codeGet} type=\"primary\" block={true}>\n                    Get Verification Code From Email\n                  </Button>\n                </Form.Item>\n              </Form.Item>\n\n              <Form.Item\n                required\n                label=\"Password\"\n                hasFeedback\n                validateStatus={\n                  errors.password && touched.password ? \"error\" : \"success\"\n                }\n              >\n                <Input\n                  id=\"password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password\n                      ? \"text-input error\"\n                      : \"text-input\"\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Confirm\" hasFeedback>\n                <Input\n                  id=\"confirmPassword\"\n                  placeholder=\"Enter your confirmPassword\"\n                  type=\"password\"\n                  value={values.confirmPassword}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.confirmPassword && touched.confirmPassword\n                      ? \"text-input error\"\n                      : \"text-input\"\n                  }\n                />\n                {errors.confirmPassword && touched.confirmPassword && (\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item {...tailFormItemLayout}>\n                <Button\n                  onClick={handleSubmit}\n                  type=\"primary\"\n                  disabled={isSubmitting}\n                >\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n}\n\nexport default RegisterPage;\n"]},"metadata":{},"sourceType":"module"}