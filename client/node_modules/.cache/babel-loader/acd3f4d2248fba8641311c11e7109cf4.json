{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { INTERNAL_COL_DEFINE } from './utils';\nexport default function ColGroup(props, _ref) {\n  var table = _ref.table;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      expandIconAsCell = _table$props.expandIconAsCell;\n  var fixed = props.fixed;\n  var cols = [];\n\n  if (expandIconAsCell && fixed !== 'right') {\n    cols.push(React.createElement('col', {\n      className: prefixCls + '-expand-icon-col',\n      key: 'rc-table-expand-icon-col'\n    }));\n  }\n\n  var leafColumns = void 0;\n\n  if (fixed === 'left') {\n    leafColumns = table.columnManager.leftLeafColumns();\n  } else if (fixed === 'right') {\n    leafColumns = table.columnManager.rightLeafColumns();\n  } else {\n    leafColumns = table.columnManager.leafColumns();\n  }\n\n  cols = cols.concat(leafColumns.map(function (_ref2) {\n    var key = _ref2.key,\n        dataIndex = _ref2.dataIndex,\n        width = _ref2.width,\n        additionalProps = _ref2[INTERNAL_COL_DEFINE];\n    var mergedKey = key !== undefined ? key : dataIndex;\n    return React.createElement('col', _extends({\n      key: mergedKey,\n      style: {\n        width: width,\n        minWidth: width\n      }\n    }, additionalProps));\n  }));\n  return React.createElement('colgroup', null, cols);\n}\nColGroup.propTypes = {\n  fixed: PropTypes.string\n};\nColGroup.contextTypes = {\n  table: PropTypes.any\n};","map":{"version":3,"sources":["/Users/wwh/Desktop/vscode/SCGO/client/node_modules/rc-table/es/ColGroup.js"],"names":["_extends","React","PropTypes","INTERNAL_COL_DEFINE","ColGroup","props","_ref","table","_table$props","prefixCls","expandIconAsCell","fixed","cols","push","createElement","className","key","leafColumns","columnManager","leftLeafColumns","rightLeafColumns","concat","map","_ref2","dataIndex","width","additionalProps","mergedKey","undefined","style","minWidth","propTypes","string","contextTypes","any"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAT,QAAoC,SAApC;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC5C,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,MAAIC,YAAY,GAAGD,KAAK,CAACF,KAAzB;AAAA,MACII,SAAS,GAAGD,YAAY,CAACC,SAD7B;AAAA,MAEIC,gBAAgB,GAAGF,YAAY,CAACE,gBAFpC;AAGA,MAAIC,KAAK,GAAGN,KAAK,CAACM,KAAlB;AAGA,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAIF,gBAAgB,IAAIC,KAAK,KAAK,OAAlC,EAA2C;AACzCC,IAAAA,IAAI,CAACC,IAAL,CAAUZ,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAEC,MAAAA,SAAS,EAAEN,SAAS,GAAG,kBAAzB;AAA6CO,MAAAA,GAAG,EAAE;AAAlD,KAA3B,CAAV;AACD;;AAED,MAAIC,WAAW,GAAG,KAAK,CAAvB;;AAEA,MAAIN,KAAK,KAAK,MAAd,EAAsB;AACpBM,IAAAA,WAAW,GAAGV,KAAK,CAACW,aAAN,CAAoBC,eAApB,EAAd;AACD,GAFD,MAEO,IAAIR,KAAK,KAAK,OAAd,EAAuB;AAC5BM,IAAAA,WAAW,GAAGV,KAAK,CAACW,aAAN,CAAoBE,gBAApB,EAAd;AACD,GAFM,MAEA;AACLH,IAAAA,WAAW,GAAGV,KAAK,CAACW,aAAN,CAAoBD,WAApB,EAAd;AACD;;AACDL,EAAAA,IAAI,GAAGA,IAAI,CAACS,MAAL,CAAYJ,WAAW,CAACK,GAAZ,CAAgB,UAAUC,KAAV,EAAiB;AAClD,QAAIP,GAAG,GAAGO,KAAK,CAACP,GAAhB;AAAA,QACIQ,SAAS,GAAGD,KAAK,CAACC,SADtB;AAAA,QAEIC,KAAK,GAAGF,KAAK,CAACE,KAFlB;AAAA,QAGIC,eAAe,GAAGH,KAAK,CAACpB,mBAAD,CAH3B;AAKA,QAAIwB,SAAS,GAAGX,GAAG,KAAKY,SAAR,GAAoBZ,GAApB,GAA0BQ,SAA1C;AACA,WAAOvB,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2Bd,QAAQ,CAAC;AAAEgB,MAAAA,GAAG,EAAEW,SAAP;AAAkBE,MAAAA,KAAK,EAAE;AAAEJ,QAAAA,KAAK,EAAEA,KAAT;AAAgBK,QAAAA,QAAQ,EAAEL;AAA1B;AAAzB,KAAD,EAA+DC,eAA/D,CAAnC,CAAP;AACD,GARkB,CAAZ,CAAP;AAUA,SAAOzB,KAAK,CAACa,aAAN,CACL,UADK,EAEL,IAFK,EAGLF,IAHK,CAAP;AAKD;AAEDR,QAAQ,CAAC2B,SAAT,GAAqB;AACnBpB,EAAAA,KAAK,EAAET,SAAS,CAAC8B;AADE,CAArB;AAIA5B,QAAQ,CAAC6B,YAAT,GAAwB;AACtB1B,EAAAA,KAAK,EAAEL,SAAS,CAACgC;AADK,CAAxB","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { INTERNAL_COL_DEFINE } from './utils';\n\nexport default function ColGroup(props, _ref) {\n  var table = _ref.table;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      expandIconAsCell = _table$props.expandIconAsCell;\n  var fixed = props.fixed;\n\n\n  var cols = [];\n\n  if (expandIconAsCell && fixed !== 'right') {\n    cols.push(React.createElement('col', { className: prefixCls + '-expand-icon-col', key: 'rc-table-expand-icon-col' }));\n  }\n\n  var leafColumns = void 0;\n\n  if (fixed === 'left') {\n    leafColumns = table.columnManager.leftLeafColumns();\n  } else if (fixed === 'right') {\n    leafColumns = table.columnManager.rightLeafColumns();\n  } else {\n    leafColumns = table.columnManager.leafColumns();\n  }\n  cols = cols.concat(leafColumns.map(function (_ref2) {\n    var key = _ref2.key,\n        dataIndex = _ref2.dataIndex,\n        width = _ref2.width,\n        additionalProps = _ref2[INTERNAL_COL_DEFINE];\n\n    var mergedKey = key !== undefined ? key : dataIndex;\n    return React.createElement('col', _extends({ key: mergedKey, style: { width: width, minWidth: width } }, additionalProps));\n  }));\n\n  return React.createElement(\n    'colgroup',\n    null,\n    cols\n  );\n}\n\nColGroup.propTypes = {\n  fixed: PropTypes.string\n};\n\nColGroup.contextTypes = {\n  table: PropTypes.any\n};"]},"metadata":{},"sourceType":"module"}