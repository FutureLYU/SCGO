{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ConfigConsumer } from '../config-provider';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\n\nfunction fixControlledValue(value) {\n  if (typeof value === 'undefined' || value === null) {\n    return '';\n  }\n\n  return value;\n}\n\nfunction hasPrefixSuffix(props) {\n  return !!('prefix' in props || props.suffix || props.allowClear);\n}\n\nvar InputSizes = tuple('small', 'default', 'large');\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));\n\n    _this.saveInput = function (node) {\n      _this.input = node;\n    };\n\n    _this.handleKeyDown = function (e) {\n      var _this$props = _this.props,\n          onPressEnter = _this$props.onPressEnter,\n          onKeyDown = _this$props.onKeyDown;\n\n      if (e.keyCode === 13 && onPressEnter) {\n        onPressEnter(e);\n      }\n\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    };\n\n    _this.handleReset = function (e) {\n      _this.setValue('', e, function () {\n        _this.focus();\n      });\n    };\n\n    _this.handleChange = function (e) {\n      _this.setValue(e.target.value, e);\n    };\n\n    _this.renderComponent = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls;\n      var customizePrefixCls = _this.props.prefixCls;\n      var prefixCls = getPrefixCls('input', customizePrefixCls);\n      return _this.renderLabeledInput(prefixCls, _this.renderInput(prefixCls));\n    };\n\n    var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;\n    _this.state = {\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"componentDidUpdate\",\n    // Since polyfill `getSnapshotBeforeUpdate` need work with `componentDidUpdate`.\n    // We keep an empty function here.\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      if (hasPrefixSuffix(prevProps) !== hasPrefixSuffix(this.props)) {\n        warning(this.input !== document.activeElement, 'Input', \"When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ\");\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getInputClassName\",\n    value: function getInputClassName(prefixCls) {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          size = _this$props2.size,\n          disabled = _this$props2.disabled;\n      return classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, e, callback) {\n      if (!('value' in this.props)) {\n        this.setState({\n          value: value\n        }, callback);\n      }\n\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        var event = e;\n\n        if (e.type === 'click') {\n          // click clear icon\n          event = Object.create(e);\n          event.target = this.input;\n          event.currentTarget = this.input;\n          var originalInputValue = this.input.value; // change input value cause e.target.value should be '' when clear input\n\n          this.input.value = '';\n          onChange(event); // reset input value\n\n          this.input.value = originalInputValue;\n          return;\n        }\n\n        onChange(event);\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.input.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.input.blur();\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.input.select();\n    }\n  }, {\n    key: \"renderClearIcon\",\n    value: function renderClearIcon(prefixCls) {\n      var _this$props3 = this.props,\n          allowClear = _this$props3.allowClear,\n          disabled = _this$props3.disabled;\n      var value = this.state.value;\n\n      if (!allowClear || disabled || value === undefined || value === null || value === '') {\n        return null;\n      }\n\n      return React.createElement(Icon, {\n        type: \"close-circle\",\n        theme: \"filled\",\n        onClick: this.handleReset,\n        className: \"\".concat(prefixCls, \"-clear-icon\"),\n        role: \"button\"\n      });\n    }\n  }, {\n    key: \"renderSuffix\",\n    value: function renderSuffix(prefixCls) {\n      var _this$props4 = this.props,\n          suffix = _this$props4.suffix,\n          allowClear = _this$props4.allowClear;\n\n      if (suffix || allowClear) {\n        return React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-suffix\")\n        }, this.renderClearIcon(prefixCls), suffix);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderLabeledInput\",\n    value: function renderLabeledInput(prefixCls, children) {\n      var _classNames3;\n\n      var _this$props5 = this.props,\n          addonBefore = _this$props5.addonBefore,\n          addonAfter = _this$props5.addonAfter,\n          style = _this$props5.style,\n          size = _this$props5.size,\n          className = _this$props5.className; // Not wrap when there is not addons\n\n      if (!addonBefore && !addonAfter) {\n        return children;\n      }\n\n      var wrapperClassName = \"\".concat(prefixCls, \"-group\");\n      var addonClassName = \"\".concat(wrapperClassName, \"-addon\");\n      var addonBeforeNode = addonBefore ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonBefore) : null;\n      var addonAfterNode = addonAfter ? React.createElement(\"span\", {\n        className: addonClassName\n      }, addonAfter) : null;\n      var mergedWrapperClassName = classNames(\"\".concat(prefixCls, \"-wrapper\"), _defineProperty({}, wrapperClassName, addonBefore || addonAfter));\n      var mergedGroupClassName = classNames(className, \"\".concat(prefixCls, \"-group-wrapper\"), (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-sm\"), size === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-group-wrapper-lg\"), size === 'large'), _classNames3)); // Need another wrapper for changing display:table to display:inline-block\n      // and put style prop in wrapper\n\n      return React.createElement(\"span\", {\n        className: mergedGroupClassName,\n        style: style\n      }, React.createElement(\"span\", {\n        className: mergedWrapperClassName\n      }, addonBeforeNode, React.cloneElement(children, {\n        style: null\n      }), addonAfterNode));\n    }\n  }, {\n    key: \"renderLabeledIcon\",\n    value: function renderLabeledIcon(prefixCls, children) {\n      var _classNames4;\n\n      var props = this.props;\n      var suffix = this.renderSuffix(prefixCls);\n\n      if (!hasPrefixSuffix(props)) {\n        return children;\n      }\n\n      var prefix = props.prefix ? React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-prefix\")\n      }, props.prefix) : null;\n      var affixWrapperCls = classNames(props.className, \"\".concat(prefixCls, \"-affix-wrapper\"), (_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(prefixCls, \"-affix-wrapper-sm\"), props.size === 'small'), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-affix-wrapper-lg\"), props.size === 'large'), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-affix-wrapper-with-clear-btn\"), props.suffix && props.allowClear && this.state.value), _classNames4));\n      return React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: props.style\n      }, prefix, React.cloneElement(children, {\n        style: null,\n        className: this.getInputClassName(prefixCls)\n      }), suffix);\n    }\n  }, {\n    key: \"renderInput\",\n    value: function renderInput(prefixCls) {\n      var _this$props6 = this.props,\n          className = _this$props6.className,\n          addonBefore = _this$props6.addonBefore,\n          addonAfter = _this$props6.addonAfter;\n      var value = this.state.value; // Fix https://fb.me/react-unknown-prop\n\n      var otherProps = omit(this.props, ['prefixCls', 'onPressEnter', 'addonBefore', 'addonAfter', 'prefix', 'suffix', 'allowClear', // Input elements must be either controlled or uncontrolled,\n      // specify either the value prop, or the defaultValue prop, but not both.\n      'defaultValue', 'size']);\n      return this.renderLabeledIcon(prefixCls, React.createElement(\"input\", _extends({}, otherProps, {\n        value: fixControlledValue(value),\n        onChange: this.handleChange,\n        className: classNames(this.getInputClassName(prefixCls), _defineProperty({}, className, className && !addonBefore && !addonAfter)),\n        onKeyDown: this.handleKeyDown,\n        ref: this.saveInput\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderComponent);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('value' in nextProps) {\n        return {\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.defaultProps = {\n  type: 'text'\n};\nInput.propTypes = {\n  type: PropTypes.string,\n  id: PropTypes.string,\n  size: PropTypes.oneOf(InputSizes),\n  maxLength: PropTypes.number,\n  disabled: PropTypes.bool,\n  value: PropTypes.any,\n  defaultValue: PropTypes.any,\n  className: PropTypes.string,\n  addonBefore: PropTypes.node,\n  addonAfter: PropTypes.node,\n  prefixCls: PropTypes.string,\n  onPressEnter: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  prefix: PropTypes.node,\n  suffix: PropTypes.node,\n  allowClear: PropTypes.bool\n};\npolyfill(Input);\nexport default Input;","map":{"version":3,"sources":["input/Input.jsx"],"names":["value","props","InputSizes","tuple","Input","React","Component","onPressEnter","onKeyDown","e","getPrefixCls","customizePrefixCls","prefixCls","nextProps","prevProps","hasPrefixSuffix","warning","document","size","disabled","classNames","callback","onChange","event","Object","originalInputValue","allowClear","suffix","children","addonBefore","addonAfter","style","className","wrapperClassName","addonClassName","addonBeforeNode","addonAfterNode","mergedWrapperClassName","mergedGroupClassName","prefix","affixWrapperCls","otherProps","omit","fixControlledValue","saveInput","type","PropTypes","id","maxLength","defaultValue","onKeyUp","onFocus","onBlur","bool","polyfill"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,SAAA,QAAA,QAAA,yBAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,SAAA,KAAA,QAAA,eAAA;AACA,OAAA,OAAA,MAAA,kBAAA;;AACA,SAAA,kBAAA,CAAA,KAAA,EAAmC;AAC/B,MAAI,OAAA,KAAA,KAAA,WAAA,IAAgCA,KAAK,KAAzC,IAAA,EAAoD;AAChD,WAAA,EAAA;AACH;;AACD,SAAA,KAAA;AACH;;AACD,SAAA,eAAA,CAAA,KAAA,EAAgC;AAC5B,SAAO,CAAC,EAAE,YAAA,KAAA,IAAqBC,KAAK,CAA1B,MAAA,IAAqCA,KAAK,CAApD,UAAQ,CAAR;AACH;;AACD,IAAMC,UAAU,GAAGC,KAAK,CAAA,OAAA,EAAA,SAAA,EAAxB,OAAwB,CAAxB;;IACMC,K;;;AACF,WAAA,KAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;AACf,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AACA,IAAA,KAAA,CAAA,SAAA,GAAiB,UAAA,IAAA,EAAU;AACvB,MAAA,KAAA,CAAA,KAAA,GAAA,IAAA;AADJ,KAAA;;AAGA,IAAA,KAAA,CAAA,aAAA,GAAqB,UAAA,CAAA,EAAO;AAAA,UAAA,WAAA,GACY,KAAA,CADZ,KAAA;AAAA,UAChBG,YADgB,GAAA,WAAA,CAAA,YAAA;AAAA,UACFC,SADE,GAAA,WAAA,CAAA,SAAA;;AAExB,UAAIC,CAAC,CAADA,OAAAA,KAAAA,EAAAA,IAAJ,YAAA,EAAsC;AAClCF,QAAAA,YAAY,CAAZA,CAAY,CAAZA;AACH;;AACD,UAAA,SAAA,EAAe;AACXC,QAAAA,SAAS,CAATA,CAAS,CAATA;AACH;AAPL,KAAA;;AASA,IAAA,KAAA,CAAA,WAAA,GAAmB,UAAA,CAAA,EAAO;AACtB,MAAA,KAAA,CAAA,QAAA,CAAA,EAAA,EAAA,CAAA,EAAqB,YAAM;AACvB,QAAA,KAAA,CAAA,KAAA;AADJ,OAAA;AADJ,KAAA;;AAKA,IAAA,KAAA,CAAA,YAAA,GAAoB,UAAA,CAAA,EAAO;AACvB,MAAA,KAAA,CAAA,QAAA,CAAcC,CAAC,CAADA,MAAAA,CAAd,KAAA,EAAA,CAAA;AADJ,KAAA;;AAGA,IAAA,KAAA,CAAA,eAAA,GAAuB,UAAA,IAAA,EAAsB;AAAA,UAAnBC,YAAmB,GAAA,IAAA,CAAnBA,YAAmB;AAAA,UACtBC,kBADsB,GACC,KAAA,CADD,KACC,CADD,SAAA;AAEzC,UAAMC,SAAS,GAAGF,YAAY,CAAA,OAAA,EAA9B,kBAA8B,CAA9B;AACA,aAAO,KAAA,CAAA,kBAAA,CAAA,SAAA,EAAmC,KAAA,CAAA,WAAA,CAA1C,SAA0C,CAAnC,CAAP;AAHJ,KAAA;;AAKA,QAAMV,KAAK,GAAG,OAAOC,KAAK,CAAZ,KAAA,KAAA,WAAA,GAAqCA,KAAK,CAA1C,YAAA,GAA0DA,KAAK,CAA7E,KAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACTD,MAAAA,KAAK,EAALA;AADS,KAAb;AA5Be,WAAA,KAAA;AA+BlB;;;;AASD;AACA;yCACqB,CAAG;;;4CACAc,S,EAAW;AAC/B,UAAIC,eAAe,CAAfA,SAAe,CAAfA,KAA+BA,eAAe,CAAC,KAAnD,KAAkD,CAAlD,EAAgE;AAC5DC,QAAAA,OAAO,CAAC,KAAA,KAAA,KAAeC,QAAQ,CAAxB,aAAA,EAAA,OAAA,EAAPD,0KAAO,CAAPA;AACH;;AACD,aAAA,IAAA;AACH;;;sCACiBJ,S,EAAW;AAAA,UAAA,WAAA;;AAAA,UAAA,YAAA,GACE,KADF,KAAA;AAAA,UACjBM,IADiB,GAAA,YAAA,CAAA,IAAA;AAAA,UACXC,QADW,GAAA,YAAA,CAAA,QAAA;AAEzB,aAAOC,UAAU,CAAA,SAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EACQF,IAAI,KADZ,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAEQA,IAAI,KAFZ,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,WAAA,CAAA,EAAA,QAAA,CAAA,EAAjB,WAAiB,EAAjB;AAKH;;;6BACQlB,K,EAAOS,C,EAAGY,Q,EAAU;AACzB,UAAI,EAAE,WAAW,KAAjB,KAAI,CAAJ,EAA8B;AAC1B,aAAA,QAAA,CAAc;AAAErB,UAAAA,KAAK,EAALA;AAAF,SAAd,EAAA,QAAA;AACH;;AAHwB,UAIjBsB,QAJiB,GAIJ,KAJI,KAIJ,CAJI,QAAA;;AAKzB,UAAA,QAAA,EAAc;AACV,YAAIC,KAAK,GAAT,CAAA;;AACA,YAAId,CAAC,CAADA,IAAAA,KAAJ,OAAA,EAAwB;AACpB;AACAc,UAAAA,KAAK,GAAGC,MAAM,CAANA,MAAAA,CAARD,CAAQC,CAARD;AACAA,UAAAA,KAAK,CAALA,MAAAA,GAAe,KAAfA,KAAAA;AACAA,UAAAA,KAAK,CAALA,aAAAA,GAAsB,KAAtBA,KAAAA;AACA,cAAME,kBAAkB,GAAG,KAAA,KAAA,CALP,KAKpB,CALoB,CAMpB;;AACA,eAAA,KAAA,CAAA,KAAA,GAAA,EAAA;AACAH,UAAAA,QAAQ,CARY,KAQZ,CAARA,CARoB,CASpB;;AACA,eAAA,KAAA,CAAA,KAAA,GAAA,kBAAA;AACA;AACH;;AACDA,QAAAA,QAAQ,CAARA,KAAQ,CAARA;AACH;AACJ;;;4BACO;AACJ,WAAA,KAAA,CAAA,KAAA;AACH;;;2BACM;AACH,WAAA,KAAA,CAAA,IAAA;AACH;;;6BACQ;AACL,WAAA,KAAA,CAAA,MAAA;AACH;;;oCACeV,S,EAAW;AAAA,UAAA,YAAA,GACU,KADV,KAAA;AAAA,UACfc,UADe,GAAA,YAAA,CAAA,UAAA;AAAA,UACHP,QADG,GAAA,YAAA,CAAA,QAAA;AAAA,UAEfnB,KAFe,GAEL,KAFK,KAEL,CAFK,KAAA;;AAGvB,UAAI,CAAA,UAAA,IAAA,QAAA,IAA2BA,KAAK,KAAhC,SAAA,IAAkDA,KAAK,KAAvD,IAAA,IAAoEA,KAAK,KAA7E,EAAA,EAAsF;AAClF,eAAA,IAAA;AACH;;AACD,aAAQ,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,IAAI,EAAV,cAAA;AAA0B,QAAA,KAAK,EAA/B,QAAA;AAAyC,QAAA,OAAO,EAAE,KAAlD,WAAA;AAAoE,QAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAA7E,aAA6E,CAA7E;AAA0G,QAAA,IAAI,EAAC;AAA/G,OAAA,CAAR;AACH;;;iCACYY,S,EAAW;AAAA,UAAA,YAAA,GACW,KADX,KAAA;AAAA,UACZe,MADY,GAAA,YAAA,CAAA,MAAA;AAAA,UACJD,UADI,GAAA,YAAA,CAAA,UAAA;;AAEpB,UAAIC,MAAM,IAAV,UAAA,EAA0B;AACtB,eAAQ,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,UAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,SAAA;AAAf,SAAA,EACT,KAAA,eAAA,CADS,SACT,CADS,EAAR,MAAQ,CAAR;AAIH;;AACD,aAAA,IAAA;AACH;;;uCACkBf,S,EAAWgB,Q,EAAU;AAAA,UAAA,YAAA;;AAAA,UAAA,YAAA,GACwB,KADxB,KAAA;AAAA,UAC5BC,WAD4B,GAAA,YAAA,CAAA,WAAA;AAAA,UACfC,UADe,GAAA,YAAA,CAAA,UAAA;AAAA,UACHC,KADG,GAAA,YAAA,CAAA,KAAA;AAAA,UACIb,IADJ,GAAA,YAAA,CAAA,IAAA;AAAA,UACUc,SADV,GAAA,YAAA,CAAA,SAAA,CAAA,CAEpC;;AACA,UAAI,CAAA,WAAA,IAAgB,CAApB,UAAA,EAAiC;AAC7B,eAAA,QAAA;AACH;;AACD,UAAMC,gBAAgB,GAAA,GAAA,MAAA,CAAA,SAAA,EAAtB,QAAsB,CAAtB;AACA,UAAMC,cAAc,GAAA,GAAA,MAAA,CAAA,gBAAA,EAApB,QAAoB,CAApB;AACA,UAAMC,eAAe,GAAGN,WAAW,GAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAEK;AAAjB,OAAA,EAAJ,WAAI,CAAJ,GAAnC,IAAA;AACA,UAAME,cAAc,GAAGN,UAAU,GAAG,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAEI;AAAjB,OAAA,EAAH,UAAG,CAAH,GAAjC,IAAA;AACA,UAAMG,sBAAsB,GAAGjB,UAAU,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA,CAAA,EAAA,eAAA,CAAA,EAAA,EAAA,gBAAA,EACjBS,WAAW,IADnC,UAAyC,CAAA,CAAzC;AAGA,UAAMS,oBAAoB,GAAGlB,UAAU,CAAA,SAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,GAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,mBAAA,CAAA,EACAF,IAAI,KADJ,OAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,mBAAA,CAAA,EAEAA,IAAI,KAFJ,OAAA,CAAA,EAbH,YAaG,EAAvC,CAboC,CAiBpC;AACA;;AACA,aAAQ,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAf,oBAAA;AAAuC,QAAA,KAAK,EAAEa;AAA9C,OAAA,EACR,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAEM;AAAjB,OAAA,EAAA,eAAA,EAEG,KAAK,CAAL,YAAA,CAAA,QAAA,EAA6B;AAAEN,QAAAA,KAAK,EAAE;AAAT,OAA7B,CAFH,EADA,cACA,CADQ,CAAR;AAOH;;;sCACiBnB,S,EAAWgB,Q,EAAU;AAAA,UAAA,YAAA;;AAAA,UAC3B3B,KAD2B,GAAA,KAAA,KAAA;AAEnC,UAAM0B,MAAM,GAAG,KAAA,YAAA,CAAf,SAAe,CAAf;;AACA,UAAI,CAACZ,eAAe,CAApB,KAAoB,CAApB,EAA6B;AACzB,eAAA,QAAA;AACH;;AACD,UAAMwB,MAAM,GAAGtC,KAAK,CAALA,MAAAA,GAAgB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,SAAA;AAAf,OAAA,EAAyCA,KAAK,CAA9DA,MAAgB,CAAhBA,GAAf,IAAA;AACA,UAAMuC,eAAe,GAAGpB,UAAU,CAACnB,KAAK,CAAN,SAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,GAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,mBAAA,CAAA,EACKA,KAAK,CAALA,IAAAA,KADL,OAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,mBAAA,CAAA,EAEKA,KAAK,CAALA,IAAAA,KAFL,OAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,+BAAA,CAAA,EAGiBA,KAAK,CAALA,MAAAA,IAAgBA,KAAK,CAArBA,UAAAA,IAAoC,KAAA,KAAA,CAHrD,KAAA,CAAA,EAAlC,YAAkC,EAAlC;AAKA,aAAQ,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,EAAf,eAAA;AAAkC,QAAA,KAAK,EAAEA,KAAK,CAAC8B;AAA/C,OAAA,EAAA,MAAA,EAEP,KAAK,CAAL,YAAA,CAAA,QAAA,EAA6B;AAC1BA,QAAAA,KAAK,EADqB,IAAA;AAE1BC,QAAAA,SAAS,EAAE,KAAA,iBAAA,CAAA,SAAA;AAFe,OAA7B,CAFO,EAAR,MAAQ,CAAR;AAQH;;;gCACWpB,S,EAAW;AAAA,UAAA,YAAA,GAC4B,KAD5B,KAAA;AAAA,UACXoB,SADW,GAAA,YAAA,CAAA,SAAA;AAAA,UACAH,WADA,GAAA,YAAA,CAAA,WAAA;AAAA,UACaC,UADb,GAAA,YAAA,CAAA,UAAA;AAAA,UAEX9B,KAFW,GAED,KAFC,KAED,CAFC,KAAA,CAAA,CAGnB;;AACA,UAAMyC,UAAU,GAAGC,IAAI,CAAC,KAAD,KAAA,EAAa,CAAA,WAAA,EAAA,cAAA,EAAA,aAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA,EAQhC;AACA;AATgC,oBAAA,EAApC,MAAoC,CAAb,CAAvB;AAaA,aAAO,KAAA,iBAAA,CAAA,SAAA,EAAkC,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAAuB,QAAA,KAAK,EAAEC,kBAAkB,CAAhD,KAAgD,CAAhD;AAAyD,QAAA,QAAQ,EAAE,KAAnE,YAAA;AAAsF,QAAA,SAAS,EAAEvB,UAAU,CAAC,KAAA,iBAAA,CAAD,SAAC,CAAD,EAAA,eAAA,CAAA,EAAA,EAAA,SAAA,EACnIY,SAAS,IAAI,CAAbA,WAAAA,IAA6B,CADL,UAA2G,CAAA,CAA3G;AAErC,QAAA,SAAS,EAAE,KAF0B,aAAA;AAEN,QAAA,GAAG,EAAE,KAAKY;AAFJ,OAAA,CAAA,CAAlC,CAAP;AAGH;;;6BACQ;AACL,aAAO,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,IAAA,EAAiB,KAAxB,eAAO,CAAP;AACH;;;6CAlJ+B/B,S,EAAW;AACvC,UAAI,WAAJ,SAAA,EAA0B;AACtB,eAAO;AACHb,UAAAA,KAAK,EAAEa,SAAS,CAACb;AADd,SAAP;AAGH;;AACD,aAAA,IAAA;AACH;;;;EAxCeK,KAAK,CAACC,S;;AAqL1BF,KAAK,CAALA,YAAAA,GAAqB;AACjByC,EAAAA,IAAI,EAAE;AADW,CAArBzC;AAGAA,KAAK,CAALA,SAAAA,GAAkB;AACdyC,EAAAA,IAAI,EAAEC,SAAS,CADD,MAAA;AAEdC,EAAAA,EAAE,EAAED,SAAS,CAFC,MAAA;AAGd5B,EAAAA,IAAI,EAAE4B,SAAS,CAATA,KAAAA,CAHQ,UAGRA,CAHQ;AAIdE,EAAAA,SAAS,EAAEF,SAAS,CAJN,MAAA;AAKd3B,EAAAA,QAAQ,EAAE2B,SAAS,CALL,IAAA;AAMd9C,EAAAA,KAAK,EAAE8C,SAAS,CANF,GAAA;AAOdG,EAAAA,YAAY,EAAEH,SAAS,CAPT,GAAA;AAQdd,EAAAA,SAAS,EAAEc,SAAS,CARN,MAAA;AASdjB,EAAAA,WAAW,EAAEiB,SAAS,CATR,IAAA;AAUdhB,EAAAA,UAAU,EAAEgB,SAAS,CAVP,IAAA;AAWdlC,EAAAA,SAAS,EAAEkC,SAAS,CAXN,MAAA;AAYdvC,EAAAA,YAAY,EAAEuC,SAAS,CAZT,IAAA;AAadtC,EAAAA,SAAS,EAAEsC,SAAS,CAbN,IAAA;AAcdI,EAAAA,OAAO,EAAEJ,SAAS,CAdJ,IAAA;AAedK,EAAAA,OAAO,EAAEL,SAAS,CAfJ,IAAA;AAgBdM,EAAAA,MAAM,EAAEN,SAAS,CAhBH,IAAA;AAiBdP,EAAAA,MAAM,EAAEO,SAAS,CAjBH,IAAA;AAkBdnB,EAAAA,MAAM,EAAEmB,SAAS,CAlBH,IAAA;AAmBdpB,EAAAA,UAAU,EAAEoB,SAAS,CAACO;AAnBR,CAAlBjD;AAqBAkD,QAAQ,CAARA,KAAQ,CAARA;AACA,eAAA,KAAA","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ConfigConsumer } from '../config-provider';\nimport Icon from '../icon';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\nfunction fixControlledValue(value) {\n    if (typeof value === 'undefined' || value === null) {\n        return '';\n    }\n    return value;\n}\nfunction hasPrefixSuffix(props) {\n    return !!('prefix' in props || props.suffix || props.allowClear);\n}\nconst InputSizes = tuple('small', 'default', 'large');\nclass Input extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveInput = (node) => {\n            this.input = node;\n        };\n        this.handleKeyDown = (e) => {\n            const { onPressEnter, onKeyDown } = this.props;\n            if (e.keyCode === 13 && onPressEnter) {\n                onPressEnter(e);\n            }\n            if (onKeyDown) {\n                onKeyDown(e);\n            }\n        };\n        this.handleReset = (e) => {\n            this.setValue('', e, () => {\n                this.focus();\n            });\n        };\n        this.handleChange = (e) => {\n            this.setValue(e.target.value, e);\n        };\n        this.renderComponent = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls } = this.props;\n            const prefixCls = getPrefixCls('input', customizePrefixCls);\n            return this.renderLabeledInput(prefixCls, this.renderInput(prefixCls));\n        };\n        const value = typeof props.value === 'undefined' ? props.defaultValue : props.value;\n        this.state = {\n            value,\n        };\n    }\n    static getDerivedStateFromProps(nextProps) {\n        if ('value' in nextProps) {\n            return {\n                value: nextProps.value,\n            };\n        }\n        return null;\n    }\n    // Since polyfill `getSnapshotBeforeUpdate` need work with `componentDidUpdate`.\n    // We keep an empty function here.\n    componentDidUpdate() { }\n    getSnapshotBeforeUpdate(prevProps) {\n        if (hasPrefixSuffix(prevProps) !== hasPrefixSuffix(this.props)) {\n            warning(this.input !== document.activeElement, 'Input', `When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ`);\n        }\n        return null;\n    }\n    getInputClassName(prefixCls) {\n        const { size, disabled } = this.props;\n        return classNames(prefixCls, {\n            [`${prefixCls}-sm`]: size === 'small',\n            [`${prefixCls}-lg`]: size === 'large',\n            [`${prefixCls}-disabled`]: disabled,\n        });\n    }\n    setValue(value, e, callback) {\n        if (!('value' in this.props)) {\n            this.setState({ value }, callback);\n        }\n        const { onChange } = this.props;\n        if (onChange) {\n            let event = e;\n            if (e.type === 'click') {\n                // click clear icon\n                event = Object.create(e);\n                event.target = this.input;\n                event.currentTarget = this.input;\n                const originalInputValue = this.input.value;\n                // change input value cause e.target.value should be '' when clear input\n                this.input.value = '';\n                onChange(event);\n                // reset input value\n                this.input.value = originalInputValue;\n                return;\n            }\n            onChange(event);\n        }\n    }\n    focus() {\n        this.input.focus();\n    }\n    blur() {\n        this.input.blur();\n    }\n    select() {\n        this.input.select();\n    }\n    renderClearIcon(prefixCls) {\n        const { allowClear, disabled } = this.props;\n        const { value } = this.state;\n        if (!allowClear || disabled || value === undefined || value === null || value === '') {\n            return null;\n        }\n        return (<Icon type=\"close-circle\" theme=\"filled\" onClick={this.handleReset} className={`${prefixCls}-clear-icon`} role=\"button\"/>);\n    }\n    renderSuffix(prefixCls) {\n        const { suffix, allowClear } = this.props;\n        if (suffix || allowClear) {\n            return (<span className={`${prefixCls}-suffix`}>\n          {this.renderClearIcon(prefixCls)}\n          {suffix}\n        </span>);\n        }\n        return null;\n    }\n    renderLabeledInput(prefixCls, children) {\n        const { addonBefore, addonAfter, style, size, className } = this.props;\n        // Not wrap when there is not addons\n        if (!addonBefore && !addonAfter) {\n            return children;\n        }\n        const wrapperClassName = `${prefixCls}-group`;\n        const addonClassName = `${wrapperClassName}-addon`;\n        const addonBeforeNode = addonBefore ? (<span className={addonClassName}>{addonBefore}</span>) : null;\n        const addonAfterNode = addonAfter ? <span className={addonClassName}>{addonAfter}</span> : null;\n        const mergedWrapperClassName = classNames(`${prefixCls}-wrapper`, {\n            [wrapperClassName]: addonBefore || addonAfter,\n        });\n        const mergedGroupClassName = classNames(className, `${prefixCls}-group-wrapper`, {\n            [`${prefixCls}-group-wrapper-sm`]: size === 'small',\n            [`${prefixCls}-group-wrapper-lg`]: size === 'large',\n        });\n        // Need another wrapper for changing display:table to display:inline-block\n        // and put style prop in wrapper\n        return (<span className={mergedGroupClassName} style={style}>\n        <span className={mergedWrapperClassName}>\n          {addonBeforeNode}\n          {React.cloneElement(children, { style: null })}\n          {addonAfterNode}\n        </span>\n      </span>);\n    }\n    renderLabeledIcon(prefixCls, children) {\n        const { props } = this;\n        const suffix = this.renderSuffix(prefixCls);\n        if (!hasPrefixSuffix(props)) {\n            return children;\n        }\n        const prefix = props.prefix ? (<span className={`${prefixCls}-prefix`}>{props.prefix}</span>) : null;\n        const affixWrapperCls = classNames(props.className, `${prefixCls}-affix-wrapper`, {\n            [`${prefixCls}-affix-wrapper-sm`]: props.size === 'small',\n            [`${prefixCls}-affix-wrapper-lg`]: props.size === 'large',\n            [`${prefixCls}-affix-wrapper-with-clear-btn`]: props.suffix && props.allowClear && this.state.value,\n        });\n        return (<span className={affixWrapperCls} style={props.style}>\n        {prefix}\n        {React.cloneElement(children, {\n            style: null,\n            className: this.getInputClassName(prefixCls),\n        })}\n        {suffix}\n      </span>);\n    }\n    renderInput(prefixCls) {\n        const { className, addonBefore, addonAfter } = this.props;\n        const { value } = this.state;\n        // Fix https://fb.me/react-unknown-prop\n        const otherProps = omit(this.props, [\n            'prefixCls',\n            'onPressEnter',\n            'addonBefore',\n            'addonAfter',\n            'prefix',\n            'suffix',\n            'allowClear',\n            // Input elements must be either controlled or uncontrolled,\n            // specify either the value prop, or the defaultValue prop, but not both.\n            'defaultValue',\n            'size',\n        ]);\n        return this.renderLabeledIcon(prefixCls, <input {...otherProps} value={fixControlledValue(value)} onChange={this.handleChange} className={classNames(this.getInputClassName(prefixCls), {\n            [className]: className && !addonBefore && !addonAfter,\n        })} onKeyDown={this.handleKeyDown} ref={this.saveInput}/>);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderComponent}</ConfigConsumer>;\n    }\n}\nInput.defaultProps = {\n    type: 'text',\n};\nInput.propTypes = {\n    type: PropTypes.string,\n    id: PropTypes.string,\n    size: PropTypes.oneOf(InputSizes),\n    maxLength: PropTypes.number,\n    disabled: PropTypes.bool,\n    value: PropTypes.any,\n    defaultValue: PropTypes.any,\n    className: PropTypes.string,\n    addonBefore: PropTypes.node,\n    addonAfter: PropTypes.node,\n    prefixCls: PropTypes.string,\n    onPressEnter: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    prefix: PropTypes.node,\n    suffix: PropTypes.node,\n    allowClear: PropTypes.bool,\n};\npolyfill(Input);\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}